@using static JiraFinalApp201.Models.Tasks.Taskitems
@model JiraFinalApp201.Models.Tasks.Taskitems.TaskItem

@{
    ViewBag.Title = "Task Details";

    var statusClass = Model.Status switch
    {
        TaskStatusEnum.ToDo => "bg-secondary",
        TaskStatusEnum.InProgress => "bg-primary",
        TaskStatusEnum.Done => "bg-success",
        _ => "bg-light"
    };

    var priorityClass = Model.Priority switch
    {
        Priority.Low => "text-success",
        Priority.Medium => "text-warning",
        Priority.High => "text-danger",
        _ => "text-secondary"
    };
}

<style>
    /* Custom color variables */
    :root {
        --primary-color: #0d6efd;
        --primary-light: #e6f0ff;
        --secondary-color: #6c757d;
        --success-color: #198754;
        --success-light: #e8f5e9;
        --danger-color: #dc3545;
        --danger-light: #ffebee;
        --warning-color: #ffc107;
        --warning-light: #fffde7;
        --info-color: #0dcaf0;
        --info-light: #e0f7fa;
        --purple-color: #6f42c1;
        --purple-light: #f3e5f5;
    }
    
    /* Card styling */
    .card {
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        border: none;
        transition: all 0.3s ease;
    }
    
    .card:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.12);
    }
    
    /* Task header styling */
    .task-detail-container {
        max-width: 1000px;
        margin: 0 auto;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    
    .task-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 20px;
        border-bottom: 1px solid #e9e9e9;
    }
    
    .task-id {
        font-size: 14px;
        color: #6b778c;
    }
    
    .task-actions {
        display: flex;
        gap: 8px;
    }
    
    /* Badge styling */
    .badge {
        padding: 0.5em 0.8em;
        font-weight: 500;
        border-radius: 4px;
    }
    
    /* Status colors */
    .bg-primary, .text-primary {
        background-color: var(--primary-color) !important;
        color: white !important;
    }
    
    .bg-primary.bg-opacity-10 {
        background-color: var(--primary-light) !important;
        color: var(--primary-color) !important;
    }
    
    .bg-success, .text-success {
        background-color: var(--success-color) !important;
        color: white !important;
    }
    
    .bg-success.bg-opacity-10 {
        background-color: var(--success-light) !important;
        color: var(--success-color) !important;
    }
    
    .bg-warning, .text-warning {
        background-color: var(--warning-color) !important;
        color: black !important;
    }
    
    .bg-warning.bg-opacity-10 {
        background-color: var(--warning-light) !important;
        color: #856404 !important;
    }
    
    .bg-danger, .text-danger {
        background-color: var(--danger-color) !important;
        color: white !important;
    }
    
    .bg-danger.bg-opacity-10 {
        background-color: var(--danger-light) !important;
        color: var(--danger-color) !important;
    }
    
    .bg-info, .text-info {
        background-color: var(--info-color) !important;
        color: white !important;
    }
    
    .bg-info.bg-opacity-10 {
        background-color: var(--info-light) !important;
        color: #0c5460 !important;
    }
    
    .bg-purple, .text-purple {
        background-color: var(--purple-color) !important;
        color: white !important;
    }
    
    .bg-purple.bg-opacity-10 {
        background-color: var(--purple-light) !important;
        color: var(--purple-color) !important;
    }
    
    /* Form controls */
    .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    /* Task title styling */
    .task-title {
        font-size: 24px;
        font-weight: 500;
        margin-bottom: 16px;
    }
    
    .task-content {
        display: flex;
    }
    
    .task-main {
        flex: 1;
        padding: 20px;
        border-right: 1px solid #e9e9e9;
    }
    
    .task-sidebar {
        width: 300px;
        padding: 20px;
    }
    
    .description-container {
        margin-bottom: 24px;
    }
    
    .description-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }
    
    .description-content {
        background-color: #f4f5f7;
        border-radius: 4px;
        padding: 16px;
        margin-bottom: 16px;
        white-space: pre-line;
    }
    
    .details-section {
        margin-bottom: 16px;
    }
    
    .details-header {
        font-weight: 500;
        margin-bottom: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .details-content {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 12px;
    }
    
    .detail-item {
        margin-bottom: 12px;
    }
    
    .detail-label {
        font-size: 12px;
        color: #6b778c;
        margin-bottom: 4px;
    }
    
    .detail-value {
        font-size: 14px;
    }
    
    .status-badge {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: 500;
        color: white;
    }
    
    .priority-indicator {
        display: flex;
        align-items: center;
        gap: 4px;
    }
    
    .attachment-section {
        margin-top: 24px;
    }
    
    .attachment-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px;
        border: 1px solid #e9e9e9;
        border-radius: 4px;
        margin-bottom: 8px;
    }
</style>

<div class="container mt-4">
    <!-- Task Header with ID and Actions -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header @(Model.Status == TaskStatusEnum.ToDo ? "bg-primary" : Model.Status == TaskStatusEnum.InProgress ? "bg-warning" : "bg-success") text-white d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <div class="task-id me-2">
                            <span class="text-white"><i class="fas fa-hashtag"></i> @(Model.CONId ?? $"TASK-{Model.Id}")</span>
                        </div>
                        <div class="ms-2 badge bg-white text-dark">
                            <i class="fas @(Model.WorkType == WorkType.Bug ? "fa-bug" : Model.WorkType == WorkType.Story ? "fa-book" : "fa-tasks") me-1"></i>
                            @Model.WorkType
                        </div>
                        <div class="ms-2 badge @(Model.Priority == Priority.Low ? "bg-success" : Model.Priority == Priority.Medium ? "bg-warning text-dark" : "bg-danger")">
                            <i class="fas fa-flag me-1"></i> @Model.Priority
                        </div>
                    </div>
                </div>
    
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <!-- Title with inline editing -->
                            <div class="editable-field mb-4" data-field="Title" data-id="@Model.Id">
                                <div class="display-view d-flex align-items-center">
                                    <h2 class="task-title mb-0">@Model.Title</h2>
                                    <button class="btn btn-sm btn-link edit-title-btn p-0 ms-2" type="button">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                </div>
                                <div class="edit-view" style="display:none;">
                                    <input type="text" class="form-control mb-2 form-control-lg" value="@Model.Title">
                                    <div class="action-buttons">
                                        <button class="btn btn-sm btn-success save-edit" type="button"><i class="fas fa-check"></i> Save</button>
                                        <button class="btn btn-sm btn-danger cancel-edit" type="button"><i class="fas fa-times"></i> Cancel</button>
                                    </div>
                                </div>
                            </div>
                            <div class="task-metadata mb-3">
                                <span class="badge bg-secondary me-2"><i class="fas fa-calendar-alt me-1"></i> Created: @Model.CreatedAt.ToString("MMM dd, yyyy")</span>
                                @if (Model.CompletionDate.HasValue)
                                {
                                    <span class="badge bg-success me-2"><i class="fas fa-calendar-check me-1"></i> Completed: @Model.CompletionDate.Value.ToString("MMM dd, yyyy")</span>
                                }
                            </div>
                            
                            <!-- Description with inline editing -->
                            <div class="card mb-4">
                                <div class="card-header bg-info bg-opacity-10 text-info">
                                    <h5 class="mb-0"><i class="fas fa-align-left me-2"></i>Description</h5>
                                </div>
                                <div class="card-body">
                                    <div class="editable-field" data-field="Description" data-id="@Model.Id">
                                        <div class="display-view">
                                            @if (string.IsNullOrEmpty(Model.Description))
                                            {
                                                <p class="text-muted">No description provided</p>
                                            }
                                            else
                                            {
                                                <p>@Model.Description</p>
                                            }
                                    
                                        </div>
                                        <div class="edit-view" style="display:none;">
                                            <textarea class="form-control mb-2" rows="5">@Model.Description</textarea>
                                            <div class="action-buttons">
                                                <button class="btn btn-sm btn-success save-edit" type="button"><i class="bi bi-check-lg"></i></button>
                                                <button class="btn btn-sm btn-danger cancel-edit" type="button"><i class="bi bi-x-lg"></i></button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
            
            <!-- Attachment Section -->
            <div class="card mb-4">
                <div class="card-header bg-success bg-opacity-10 text-success">
                    <h5 class="mb-0"><i class="fas fa-paperclip me-2"></i>Attachments</h5>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.AttachmentPath))
                    {
                        @if (Model.AttachmentPath.EndsWith(".jpg") || Model.AttachmentPath.EndsWith(".jpeg") || Model.AttachmentPath.EndsWith(".png") || Model.AttachmentPath.EndsWith(".gif"))
                        {
                            <!-- Display image if it's an image file -->
                            <div class="text-center mb-3">
                                <img src="@Url.Content(Model.AttachmentPath)" class="img-fluid rounded" style="max-height: 300px;" alt="Attachment" />
                            </div>
                        }
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <i class="bi bi-paperclip me-2"></i>
                                </div>
                            <div>
                                <form method="post" action="@Url.Action("RemoveAttachment", "Task")" style="display: inline;">
                                    <input type="hidden" name="taskId" value="@Model.Id" />
                                    
                                </form>
                            </div>
                        </div>
                        
                        <!-- Reupload option -->
                        <div class="mt-3">
                            <form method="post" action="@Url.Action("UploadAttachment", "Task")" enctype="multipart/form-data">
                                <input type="hidden" name="taskId" value="@Model.Id" />
                                <div class="input-group">
                                    <input type="file" class="form-control" name="attachment" id="reuploadAttachment" accept="image/*" />
                                    <button class="btn btn-outline-primary" type="submit">
                                        <i class="bi bi-arrow-repeat"></i> Reupload
                                    </button>
                                </div>
                            </form>
                        </div>
                    }
                    else
                    {
                        <!-- Upload option when no attachment exists -->
                        <form method="post" action="@Url.Action("UploadAttachment", "Task")" enctype="multipart/form-data">
                            <input type="hidden" name="taskId" value="@Model.Id" />
                            <div class="text-center p-4 border rounded">
                                <p class="mb-3">Drag and drop files here or</p>
                                <div class="d-flex flex-column align-items-center">
                                    <div class="mb-3 w-100">
                                        <input type="file" class="form-control" name="attachment" id="uploadAttachment" accept="image/*" />
                                    </div>
                                    <div>
                                        <span id="fileChosen">No file chosen</span>
                                    </div>
                                    <button type="submit" class="btn btn-primary mt-3">
                                        Upload
                                    </button>
                                </div>
                            </div>
                        </form>
                    }
                </div>
            </div>
        </div>
        
        <!-- Sidebar -->
        <div class="col-md-4">
            <div class="card mb-3">
                <div class="card-header bg-primary bg-opacity-10 text-primary">
                    <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Details</h5>
                </div>
                <div class="card-body">
                    <!-- Status with inline editing -->
                    <div class="mb-3">
                        <div class="text-muted small mb-1">Status</div>
                        <div class="d-flex align-items-center">
                                            <div class="status-display-container">
                                                <div class="status-display badge @(Model.Status == TaskStatusEnum.ToDo ? "bg-primary" : Model.Status == TaskStatusEnum.InProgress ? "bg-warning" : "bg-success") d-flex align-items-center">
                                                    @Model.Status
                                                    <button class="btn btn-sm btn-link edit-status-btn p-0 ps-1" type="button" style="line-height:1;">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                </div>
                                            </div>
                            <select class="form-select form-select-sm auto-save-select status-select d-none" data-field="Status" data-id="@Model.Id">
                                @foreach (var status in Enum.GetValues(typeof(TaskStatusEnum)))
                                {
                                    <option value="@status" @@(Model.Status == (TaskStatusEnum)status ? "selected" : "")>@status</option>
                                }
                            </select>
                        </div>
                    </div>
                    
                    <!-- Priority with inline editing -->
                    <div class="mb-3">
                        <div class="text-muted small mb-1">Priority</div>
                        <div class="d-flex align-items-center">
                                            <div class="priority-display-container">
                                                <div class="priority-display @(Model.Priority == Priority.Low ? "text-success" : Model.Priority == Priority.Medium ? "text-warning" : "text-danger") d-flex align-items-center">
                                                    <i class="fas fa-flag me-1"></i> @Model.Priority
                                                    <button class="btn btn-sm btn-link edit-priority-btn p-0 ps-1" type="button" style="line-height:1;">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                </div>
                                            </div>
                            <select class="form-select form-select-sm auto-save-select priority-select d-none" data-field="Priority" data-id="@Model.Id">
                                @foreach (var priority in Enum.GetValues(typeof(Priority)))
                                {
                                    <option value="@priority" @@(Model.Priority == (Priority)priority ? "selected" : "")>@priority</option>
                                }
                            </select>
                        </div>
                    </div>

                                    <!-- Work Type (display only) -->
                                    <div class="mb-3">
                                        <div class="text-muted small mb-1">Work Type</div>
                                        <div class="d-flex align-items-center">
                                            <div class="worktype-display @(Model.WorkType == WorkType.Bug ? "text-danger" : Model.WorkType == WorkType.Story ? "text-primary" : "text-secondary")">
                                                <i class="fas @(Model.WorkType == WorkType.Bug ? "fa-bug" : Model.WorkType == WorkType.Story ? "fa-book" : "fa-tasks") me-1"></i> @Model.WorkType
                                            </div>
                                        </div>
                                    </div>
                    
                    <!-- Dates -->
                    <div class="mb-3">
                        <div class="text-muted small mb-1">Start date</div>
                        <div class="d-flex align-items-center">
                            <input type="date" class="form-control form-control-sm auto-save-date" 
                                   data-field="CreatedAt" data-id="@Model.Id"
                                   value="@Model.CreatedAt.ToString("yyyy-MM-dd")">
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="text-muted small mb-1">Completion date</div>
                        <div class="d-flex align-items-center">
                            <input type="date" class="form-control form-control-sm auto-save-date" 
                                   data-field="CompletionDate" data-id="@Model.Id"
                                   value="@(Model.CompletionDate.HasValue ? Model.CompletionDate.Value.ToString("yyyy-MM-dd") : "")">
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="text-muted small mb-1">Due date</div>
                        <div class="d-flex align-items-center">
                            <input type="date" class="form-control form-control-sm auto-save-date" 
                                   data-field="DueDate" data-id="@Model.Id"
                                   value="">
                        </div>
                    </div>
                    
                    <!-- Project -->
                    <div class="mb-3">
                        <div class="text-muted small mb-1">Project</div>
                        <div>@(Model.Project?.Name ?? ViewBag.ProjectName ?? "Unknown")</div>
                    </div>
                </div>
            </div>
            
            <!-- People -->
            <div class="card mb-4">
                <div class="card-header bg-purple bg-opacity-10 text-purple">
                    <h5 class="mb-0"><i class="fas fa-users me-2"></i>People</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="text-muted small mb-1">Reporter</div>
                        <div class="d-flex align-items-center">
                            <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-2" style="width: 28px; height: 28px; font-size: 14px;">@ViewBag.ReporterName?.Substring(0, 1).ToUpper()</div>
                            <div>@ViewBag.ReporterName</div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="text-muted small mb-1">Assignee</div>
                        <div class="d-flex align-items-center">
                            <div class="assignee-display-container">
                                @if (Model.Assignee != null)
                                {
                                    <div class="d-flex align-items-center">
                                        <div class="rounded-circle bg-info text-white d-flex align-items-center justify-content-center me-2" style="width: 28px; height: 28px; font-size: 14px;">@(Model.Assignee.Username?.Substring(0, 1).ToUpper() ?? "?")</div>
                                        <div>@Model.Assignee.Username</div>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-muted">Unassigned</div>
                                }
                                <button class="btn btn-sm btn-link edit-assignee-btn p-0 ms-2" type="button">
                                    <i class="fas fa-edit"></i>
                                </button>
                            </div>
                            <select class="form-select form-select-sm auto-save-select assignee-select d-none" data-field="AssigneeId" data-id="@Model.Id">
                                <option value="">Unassigned</option>
                                @foreach (var user in ViewBag.Users ?? new List<JiraFinalApp201.Models.Authentication.User>())
                                {
                                    <option value="@user.Id" @@(Model.AssigneeId == user.Id ? "selected" : "")>@user.Username</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

                <div class="mb-3">
                    <a href="@Url.Action("Index", "Board")" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-1"></i> Back to Board
                    </a>
                </div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const token = $('input[name="__RequestVerificationToken"]').val();

            // Edit title button
            $('.edit-title-btn').click(function(e) {
                e.stopPropagation();
                const $field = $(this).closest('.editable-field');
                $field.find('.display-view').hide();
                $field.find('.edit-view').show();
                $field.find('input, textarea').focus();
            });
            
            // Make description field clickable to show edit view
            $('.editable-field .display-view').not(':has(.edit-title-btn)').click(function () {
                $(this).closest('.editable-field').find('.edit-view').show();
                $(this).hide();
                
                // Focus on the input
                $(this).closest('.editable-field').find('input, textarea').focus();
            });

            // Cancel button hides edit view and shows display view
            $('.cancel-edit').click(function () {
                const container = $(this).closest('.editable-field');
                container.find('.edit-view').hide();
                container.find('.display-view').show();
            });

            // Update file input display
            $('#uploadAttachment').change(function() {
                const fileName = $(this).val().split('\\').pop();
                $('#fileChosen').text(fileName || 'No file chosen');
            });
            
            // Handle reupload file input display
            $('#reuploadAttachment').change(function() {
                const fileName = $(this).val().split('\\').pop();
                if (fileName) {
                    $(this).next('.btn').text('Upload ' + fileName);
                }
            });

            // Save button sends AJAX request to update field
            $('.save-edit').click(function () {
                const container = $(this).closest('.editable-field');
                const field = container.data('field');
                const id = container.data('id');
                let value;
                
                // Get value based on field type
                if (field === 'Description') {
                    value = container.find('textarea').val();
                } else {
                    value = container.find('select, input').val();
                }
                
                // Show loading indicator
                const saveBtn = $(this);
                const originalContent = saveBtn.html();
                saveBtn.html('<i class="bi bi-hourglass-split"></i>');
                saveBtn.prop('disabled', true);

                $.ajax({
                    url: '/Task/UpdateField',
                    type: 'POST',
                    headers: { 'RequestVerificationToken': token },
                    data: { id, field, value },
                    success: function (response) {
                        if (response.success) {
                            container.find('.edit-view').hide();
                            
                            // Update the display view with the new value
                            if (field === 'Description') {
                                container.find('.display-view p').text(value || 'No description provided');
                            } else if (field === 'Status') {
                                container.find('.display-view .badge').text(value);
                            } else if (field === 'Priority') {
                                container.find('.display-view .badge').text(value);
                            } else if (field === 'AssigneeId') {
                                // For AssigneeId, we need to refresh the page to show updated user avatar
                                location.reload();
                                return;
                            } else if (field === 'Title') {
                                container.find('.display-view h2').text(value);
                            } else {
                                container.find('.display-view').text(value);
                            }
                            
                            container.find('.display-view').show();
                        } else {
                            alert('Error: ' + response.message);
                        }
                        
                        // Reset save button
                        saveBtn.html(originalContent);
                        saveBtn.prop('disabled', false);
                    },
                    error: function () {
                        alert('An error occurred while updating the field.');
                        // Reset save button
                        saveBtn.html(originalContent);
                        saveBtn.prop('disabled', false);
                    }
                });
            });

            // Edit buttons for status, priority, work type, and assignee
            $('.edit-status-btn').click(function() {
                $('.status-display-container').addClass('d-none');
                $('.status-select').removeClass('d-none').focus();
            });
            
            $('.edit-priority-btn').click(function() {
                $('.priority-display-container').addClass('d-none');
                $('.priority-select').removeClass('d-none').focus();
            });
            
            $('.edit-worktype-btn').click(function() {
                $('.worktype-display-container').addClass('d-none');
                $('.worktype-select').removeClass('d-none').focus();
            });
            
            $('.edit-assignee-btn').click(function() {
                $('.assignee-display-container').addClass('d-none');
                $('.assignee-select').removeClass('d-none').focus();
            });
            
            // Auto-save for select dropdowns
            $('.auto-save-select').change(function () {
                const field = $(this).data('field');
                const id = $(this).data('id');
                const value = $(this).val();
                const $select = $(this);
                
                // Show a small loading indicator
                const originalBg = $(this).css('background-color');
                $(this).css('background-color', '#e9f5ff');

                $.ajax({
                    url: '/Task/UpdateField',
                    type: 'POST',
                    headers: { 'RequestVerificationToken': token },
                    data: { id, field, value },
                    success: function (response) {
                        if (response.success) {
                            // Success - briefly highlight with a success color
                            $select.css('background-color', '#d4edda');
                            setTimeout(() => {
                                $select.css('background-color', originalBg);
                                
                                // Hide select and show display with updated value
                                if (field === 'Status') {
                                    const statusText = $select.find('option:selected').text();
                                    const statusClass = statusText === 'ToDo' ? 'bg-primary' : 
                                                      statusText === 'InProgress' ? 'bg-warning' : 'bg-success';
                                    $('.status-display').text(statusText).removeClass('bg-primary bg-warning bg-success').addClass(statusClass);
                                    $('.status-select').addClass('d-none');
                                    $('.status-display-container').removeClass('d-none');
                                } else if (field === 'Priority') {
                                    const priorityText = $select.find('option:selected').text();
                                    const priorityClass = priorityText === 'Low' ? 'text-success' : 
                                                       priorityText === 'Medium' ? 'text-warning' : 'text-danger';
                                    $('.priority-display').html('<i class="fas fa-flag me-1"></i> ' + priorityText)
                                                         .removeClass('text-success text-warning text-danger')
                                                         .addClass(priorityClass);
                                    $('.priority-select').addClass('d-none');
                                    $('.priority-display-container').removeClass('d-none');
                                } else if (field === 'AssigneeId') {
                                    // For assignee, we'll reload the page to get the updated user info
                                    location.reload();
                                }
                            }, 1000);
                        } else {
                            // Error - highlight with error color
                            $select.css('background-color', '#f8d7da');
                            setTimeout(() => {
                                $select.css('background-color', originalBg);
                            }, 1000);
                            console.error('Error:', response.message);
                        }
                    },
                    error: function () {
                        // Error - highlight with error color
                        $select.css('background-color', '#f8d7da');
                        setTimeout(() => {
                            $select.css('background-color', originalBg);
                        }, 1000);
                        console.error('An error occurred while updating the field.');
                    }
                });
            });
            
            // Handle clicking outside of select dropdowns
            $(document).click(function(e) {
                if (!$(e.target).closest('.status-select, .edit-status-btn').length) {
                    $('.status-select').addClass('d-none');
                    $('.status-display-container').removeClass('d-none');
                }
                
                if (!$(e.target).closest('.priority-select, .edit-priority-btn').length) {
                    $('.priority-select').addClass('d-none');
                    $('.priority-display-container').removeClass('d-none');
                }
                
                if (!$(e.target).closest('.worktype-select, .edit-worktype-btn').length) {
                    $('.worktype-select').addClass('d-none');
                    $('.worktype-display-container').removeClass('d-none');
                }
                
                if (!$(e.target).closest('.assignee-select, .edit-assignee-btn').length) {
                    $('.assignee-select').addClass('d-none');
                    $('.assignee-display-container').removeClass('d-none');
                }
            });
            
            // Auto-save for date fields
            $('.auto-save-date').change(function () {
                const field = $(this).data('field');
                const id = $(this).data('id');
                const value = $(this).val(); // Format: YYYY-MM-DD
                
                // Show a small loading indicator
                const originalBg = $(this).css('background-color');
                $(this).css('background-color', '#e9f5ff');

                $.ajax({
                    url: '/Task/UpdateField',
                    type: 'POST',
                    headers: { 'RequestVerificationToken': token },
                    data: { id, field, value },
                    success: function (response) {
                        if (response.success) {
                            // Success - briefly highlight with a success color
                            $(this).css('background-color', '#d4edda');
                            setTimeout(() => {
                                $(this).css('background-color', originalBg);
                            }, 1000);
                        } else {
                            // Error - highlight with error color
                            $(this).css('background-color', '#f8d7da');
                            setTimeout(() => {
                                $(this).css('background-color', originalBg);
                            }, 1000);
                            console.error('Error:', response.message);
                        }
                    }.bind(this),
                    error: function () {
                        // Error - highlight with error color
                        $(this).css('background-color', '#f8d7da');
                        setTimeout(() => {
                            $(this).css('background-color', originalBg);
                        }, 1000);
                        console.error('An error occurred while updating the field.');
                    }.bind(this)
                });
            });

            $('input, textarea').keypress(function (e) {
                if (e.which === 13 && !e.shiftKey) {
                    $(this).closest('.editable-field').find('.save-edit').click();
                }
            });
        });
    </script>
}
